#+TITLE: Computer Science For Jayden's students
#+AUTHOR: Jayden B
#+OPTIONS: num:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

* Preface:
This book is to teach computer science fundamentals in a classroom environment for kids around the age of 11 - 14 with no prior experince.

It is specifically made for my use-case, but I thought it could be potentialy benificial to others and so I'm releasing it on my github.

The book is still a work in progress as I am activley teaching the curiculum expect things to change. As thing get finalized expect it to get cleaner with a lot less of my own personal anecdotes about my teaching strategy.

* What is this book
This book will also serve as the textbook your students can use!

This curiculum is 16 weeks long, and assumes 120 minutes of instructional time a week.

** Learning Philosophy:
- Holistic understanding of concepts, teach them the why and then the how behind (almost) everything they do. Add complexity slowly and intentionally.
- Show practical applications of programming quickly to keep them engaged. Imagine if all you did when learning programming was leetcodes. That would suck.
- Use professional tools, like the cmd line and git. Build important foundational skills that they'll continue to use regardless of discipline. Not too sure how this'll turn out or how well they'll keep up, but we'll see and adjust.
- Give them opportunities to explore personal interests, let them make stuff that interest them.

** Learning Goals:
- How computers evolved throughout history.
- What a computer is, the theoretical and physical parts of one.
- The relationship between hardware and software.
- How the internet works.
- How computer logic is represented
- How code turns into binary
- Using the command line
- Git and version control
- Python fundamentals

** Course Format:
Each Week is separated into different sections:
*** Overview:
- What the students can expect to learn this week
*** Lectures/Readings:
- Videos or Articles for the students to read
*** Labs:
- Work for students to do in class
*** Homework
- Work for students to do outside of class
* Week 1
** Overview
- Give students a simple overview of the fundamentals and history of computer science
** Lecture:
[[https://youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo&si=8Bc4YSvlipJt6y7e][Crash Course Computer Science, from the beginning until Binary]]
** Lab:
[[https://studio.code.org/projects/applab/iukLbcDnzqgoxuu810unLw][Code Studio Binary Game]]
* Week 2
[[https://studio.code.org/projects/applab/iukLbcDnzqgoxuu810unLw][Crash Course Computer Science 6,7,8]]
** Labs:
- Have kids prepare a presentation about someone important in computer science. For this section, we're having kids focus on picking a Pioneer, we'll make presentations about innovators later.
*** Potential People to make presentations on:
**** Pioneers
- Alan Turning
- Charles Babbage
- Ada Lovelace
- Grace Hopper
- Margaret Hamilton
- Dennis Ritche
- Tim Berners-Lee
**** Innovators
- John Carmack
- Satoshi Nakamoto
- Steve Wozniak
- Linus Torvalds
- Larry Page
- Bill Gates
*** Things to include in your presentation:
- [ ] Name, Birth date and location
- [ ] Early life and education
- [ ] When and why did they start studying math/computers?
- [ ] Where did they work?
- [ ] What was computing like before their innovations?
- [ ] Who were some of the people who worked with them?
- [ ] What were their biggest innovations/inventions Why were they important?
- [ ] Any awards or recognition they received, anything named after them?
- [ ] How is their work still relevant to today?
- [ ] Make sure to cite your sources on a final slide (Chat GPT is not a source)

* Week 3
** Overview:
- This week we're going to watch some of the python for everyone lectures, and start setting up a development environment on MacOS.
*** What We'll be Installing:
- Terminal
- Text Editor
- Brew package manager
** Lecture
*** Python For Everyone Lectures
- [[https://www.py4e.com/lessons/intro][Py4e, Why Program 1-4]]
*** Computer Fundamentals Resources from the GCF:
- [[https://edu.gcfglobal.org/en/computerbasics/what-is-a-computer/1/][What is a Computer?]]
- [[https://edu.gcfglobal.org/en/computerbasics/understanding-operating-systems/1/][What is an Operating System?]]
- [[https://edu.gcfglobal.org/en/computerbasics/understanding-applications/1/][What is an applicaiton]]
- [[https://edu.gcfglobal.org/en/basic-computer-skills/open-source-vs-closed-source-software/1/][Open source vs Closed source software]]
- [[https://edu.gcfglobal.org/en/techsavvy/taking-screenshots/1/][Taking a screenshot]]
** Lab
*** VSCode
- [[https://www.theodinproject.com/lessons/foundations-text-editors][Set up VSCode]]
*** Command line
- [[https://www.theodinproject.com/lessons/foundations-command-line-basics][Command Line Fundamentals]]
*** Package Management
- [[https://www.theodinproject.com/lessons/foundations-computer-basics#assignment][Install Homebrew]]
- If you're using an M1 mac you need to manually add brew to your PATH/ .profile. see [[https://medium.com/subjective-developer/set-up-brew-on-m1-mac-e4ea805e5634][this article.]]
** Homework
- No homework for this week.

* Week 4
** Overview
- With our new package manager, we will be installing Git, Setting up Github, and finally installing Python.
** Lecture:
*** Git
- [[https://youtu.be/2ReR1YJrNOM?si=7Fu2YxuezWKycZsr][What is Git? Explained in 2 Minutes]]
*** What does it mean to install a programming language
Modified from Pieces of [[https://www.freecodecamp.org/news/compiled-versus-interpreted-languages/][This FCC article]]

Imagine you have a hummus recipe that you want to make, but it's written in ancient Greek. There are two ways you, a non-ancient-Greek speaker, could follow its directions.

The first is if someone had already translated it into English for you. You (and anyone else who can speak English) could read the English version of the recipe and make hummus. Think of this translated recipe as the compiled version.

The second way is if you have a friend who knows ancient Greek. When you're ready to make hummus, your friend sits next to you and translates the recipe into English as you go, line by line. In this case, your friend is the interpreter for the interpreted version of the recipe.

Interpreted Languages need an interpreter. When we install Python, we're installing the Python interpreter onto our computers, that we can use to interpret Python files into a language our computer understands (Computers can only read 0s and 1s).

Compiled languages need a compiler. When we install a compiled language like C, we take a file of C code and turn it into 0s and 1s. Instead of doing this as the program is running, it does this all at once, and returns a compiled binary file (it's called a binary file because it's just 0s and 1s)

Compiled languages are generally faster, and you don't need to have a languages compiler installed on your computer to run a binary file made from that languages code.

Interpreted Languages are generally easier to write, as the interpreter is more flexible with things like datatypes and the input and output of functions.

These differences aren't important for now.
** Lab:
*** Odin Project Lessons
- [[https://www.theodinproject.com/lessons/foundations-setting-up-git][Setting up Git and Github]]
*** Installing Python
- [[https://www.python.org/][Python Download]]
- [[https://www.geeksforgeeks.org/how-to-install-pip-in-macos/][Install pip package manager]]
**** Writing and running your First a Hello World test application
- Make a python file test.py
- Enter the following line:
#+begin_src python
print("Hello World")
#+end_src
- Save the file
- Run the file through the terminal
#+begin_src
$ python3 test.py
#+end_src

** Homework:
Start working through [[https://introtopython.org/][introtopython]] lessons, up to variables, strings, and numbers

* Week 5
** Overview:
** Lecture
** Lab
** Quiz!
* Week 6
** Overview:
*** We were going too fast!
This week is going to peel back a bit and focus more on the specifics of what we're doing. We'll answer questions like:
- What is Python?
- What is programming?
- what does installing python add to my computer?
- what are text files?
- how does python turn them into computer code?

** Lecture
*** Videos:
[[https://youtu.be/RU1u-js7db8?si=vrFFEVXNHhKXYLfX][The First Programming Languages: Crash Course Computer Science #11]]
[[https://youtu.be/KN8YgJnShPM?si=w-kP7sfdwT_JGgdQ][Files & File Systems: Crash Course Computer Science #20]]
*** What is a programming language?
- A programming language is a set of instructions written by a programmer to deliver instructions to the computer to perform and accomplish a task.
- Everything your computer does is based on instructions written in a programming language by a human programmer.
- You can think of a program like a recipe and your computer like a chef who's following it.
*** What is Python?
- Python is a programming language. There are lots of different programming languages, that all produce "recipes" your computer can follow.
- Some languages are better at some kinds of programs than others, but you're generally able to write any program with any language.
- Python is commonly used for Websites and Data Science.
- Python is simple to read and write, that is why I chose it to teach you.
- You can compare programming languages to spoken human languages. As long as the other person knows the language you're speaking to them in, you can communicate instructions to them. Computers are the same!
*** How do I write a python program?
A workflow of a programmer might be something like:
**** 1. Open up a terminal window
- You can do this by typing in "terminal" into the search bar in the Launchpad app (on MacOS).
**** 2. Make a python file
- This can be done by running:
 #+begin_src
touch your_file_name.py
 #+end_src
**** 3. Open your new python file in a text editor
- The text editor we're using is Visual Studio Code.
- Open up VScode, and open the folder that your python file is stored in
- Once the file is open, you'll notice there's nothing there. Let's change that.
- Go ahead and add the following lines to the open python file:
#+begin_src python
print("hello world")
#+end_src
**** 4. Run your code
- Save your changes (Ctrl + S), and run the file by opening up a terminal in the folder of the python file and typing
 #+begin_src
python3 your_file_name.py
 #+end_src
- If everything went well, you should see the following in the terminal:
 #+begin_src
hello world
 #+end_src
 Good Job!

*** Breaking down exactly what happened.
**** What is the Terminal?
- The terminal is a way to give commands to your computer.
- The terminal is an older method of interacting with a computer than the Graphical Mouse-based Interfaces we're used to.
- The terminal is still helpful and used by programmers, as it allows us to have a simple, consistent, and reliable method to use computers. Some computers even run "headless", meaning the only way to interact with them is through the terminal (no graphics!).
- You can open the terminal as a separate application, or as a part of VScode
- From our previous example within the terminal, we gave the computer two commands:
#+begin_src
touch file_name
#+end_src}
The touch command makes a file that is named as the name you write beside.

#+begin_src
python3 my_python_file.py
#+end_src}
The python3 command runs python version 3 on the python file written beside.
**** What is a python file?
- A python file is a text file that stores python code.
- You can tell a file is a python code file based on the file extension.
**** What is a text editor?
- Text editors allow you to open up a file and change the text within it.
- Text editors only work with plaintext files. These are files where the only data is ascii characters.
- Binary files (where the content is binary numbers) usually need specialized editors to make sense of their data.
**** How did python talk to the computer?
- Computers can only understand 1s and 0s.
- The python application we ran on the terminal acts as an interpreter, something that can take the python we wrote and turn it into.
** Lab:
* Week 7
** Overview:
- Python basics the syntax of a programming language

** Lecture:
- CS Circles: 2 and 3
** Lab
- CS Circles 2X
* Week 8
** Overview
** Lecture
- CS Circles lesson
** Lab
*** Hello World Program: Write a program that prints "Hello, World!" to the console.
#+begin_src python
print() # print a string
#+end_src

*** String Manipulation: Create a program that takes a user-input string and outputs the string in uppercase, lowercase, and the number of characters in it.
#+begin_src python
# Python program showing
# a use of input()

val = input("Enter your value: ")
print(val)
print(val) # change this line to print uppercase
print(val) # change this line to print lowercase
print(val) # change this line to print the number of characters in the string
#+end_src

*** Basic Calculator: Build a simple calculator that takes two numbers as input and performs addition, subtraction, multiplication, and division.
#+begin_src python
# make variable a
# make variable b
print(f"{a} + {b} = {}")
print(f"{a} - {b} ={}")
#BONUS: how could you get a and b from the user?
# Using the input collection method from last question won't work, what's the difference between this and that? (You can ask me when you're stumped)
#+end_src

*** List Operations: Create a list of five favourite foods and print each food on a new line. Then, add a new food to the list and print the updated list.
#+begin_src python
foods = [] # put the foods in here as strings
for # finish the for loop
    print(food)
newFood = # get the user to input a new food
# add that food to the food list

#+end_src

*** Even or Odd: Write a program that asks the user for a number and determines if it is even or odd.
#+begin_src python
# make a number variable
if #if number is even
    print("number is even")
else:
    print("number is odd")
#+end_src

*** Sum of List: Write a program that calculates and prints the sum of all numbers in a predefined list of integers.
#+begin_src python
# make a number variable
numbers = [] # make a list of numbers
sum = 0
for # loop through them, print the value and add to the sum
# at the end of the loop, print the sum
#
#+end_src

*** Fibonacci Sequence: Use a loop to print the first 10 numbers in the Fibonacci sequence.
#+begin_src python
# This one is difficut! Think about how the fibonacci sequence works
# you'll need 3 variables for the solution.
#+end_src

* Week 9
** Quiz
https://forms.gle/DGN4VFbdriuB6eMZ8
